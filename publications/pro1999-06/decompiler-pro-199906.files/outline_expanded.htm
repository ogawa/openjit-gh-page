<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=shift_jis">
<meta name=ProgId content=PowerPoint.Slide>
<meta name=Generator content="Microsoft PowerPoint 9">

<script>
<!--
if( window.name != "PPTOtl" )
  parent.location.href = "../decompiler-pro-199906.html";
//-->
</script>
<meta name=Robots content=NoIndex>
</head>

<body bgcolor=white text=black link=black vlink=black alink=black>

<p><font face="ＭＳ 明朝" size=2><b><a
href="javascript:parent.GoToSld('slide0076.htm');">Javaバイトコードをデコンパイルする<br>
効果的なアルゴリズム</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face="ＭＳ 明朝" size=2>東京工業大学 情報理工学研究科</font></td>
 </tr>
</table>

</p>

<p><font face="ＭＳ 明朝" size=2><b><a
href="javascript:parent.GoToSld('slide0077.htm');">デコンパイルとは</a></b></font></p>

<p><font face="ＭＳ 明朝" size=2><b><a
href="javascript:parent.GoToSld('slide0013.htm');">背景</a></b></font></p>

<p><font face="ＭＳ 明朝" size=2><b><a
href="javascript:parent.GoToSld('slide0020.htm');">背景（その２）</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=3><font face="ＭＳ 明朝" size=2>OpenJITの一部として使いたい</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face="ＭＳ 明朝" size=2>OpenJIT</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=1><font face="ＭＳ 明朝" size=2>自己反映計算の概念を導入した開放型JITコンパイラ</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=1><font face="ＭＳ 明朝" size=2>松岡研と富士通による共同研究</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=1><font face="ＭＳ 明朝" size=2>Javaのクラスフレームワークとして構築される</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=1><font face="ＭＳ 明朝" size=2>抽象度の高い中間コード上のプログラム変換や、最適化モジュールの実現（c.f.
  Suif [Lamら,1996]）</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=1><font face="ＭＳ 明朝" size=2>Java言語の抽象構文木を使用</font></td>
 </tr>
</table>

</p>

<p><font face="ＭＳ 明朝" size=2><b><a
href="javascript:parent.GoToSld('slide0034.htm');">従来のデコンパイラでは不十分？</a></b></font></p>

<p><font face="ＭＳ 明朝" size=2><b><a
href="javascript:parent.GoToSld('slide0035.htm');">関連研究</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=3><font face="ＭＳ 明朝" size=2>従来のデコンパイラ</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face="ＭＳ 明朝" size=2>どれも技術的な詳細は不明</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=1><font face="ＭＳ 明朝" size=2>mocha（http://www.brouhaha.com/~eric/computers/mocha.html）</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=1><font face="ＭＳ 明朝" size=2>jasmine（http://members.tripod.com/~SourceTec/jasmine.htm）</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=1><font face="ＭＳ 明朝" size=2>GuavaD（行方不明）</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=1><font face="ＭＳ 明朝" size=2>jad（行方不明）など</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=3><font face="ＭＳ 明朝" size=2>Pep(Ole Agesen, 1997)</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face="ＭＳ 明朝" size=2>JavaバイトコードをSelfVMで実行</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=1><font face="ＭＳ 明朝" size=2>SelfVMには条件分岐命令がない</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=1><font face="ＭＳ 明朝" size=2>最終的には、SelfVMに条件分岐命令を導入</font></td>
 </tr>
</table>

</p>

<p><font face="ＭＳ 明朝" size=2><b><a
href="javascript:parent.GoToSld('slide0078.htm');">関連研究(その２)</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=3><font face="ＭＳ 明朝" size=2>Krakatoa(Proebstingら, 1997)</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face="ＭＳ 明朝" size=2>RamshawがPascal用に提案したアルゴリズム(Lyle
  Ramshaw, 1988)の拡張</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=1><font face="ＭＳ 明朝" size=2>不自然だが、Javaの文法にのっとった結果</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face="ＭＳ 明朝" size=2>パターンマッチングによる書き換え</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=1><font face="ＭＳ 明朝" size=2>不自然なコードから自然なコードへ</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face="ＭＳ 明朝" size=2>アドホックで、潜在的に遅い</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=1><font face="ＭＳ 明朝" size=2>より自然なコードに復元するためには、多数のパターンが必要</font></td>
 </tr>
</table>

</p>

<p><font face="ＭＳ 明朝" size=2><b><a
href="javascript:parent.GoToSld('slide0079.htm');">Krakatoaの手法</a></b></font></p>

<p><font face="ＭＳ 明朝" size=2><b><a
href="javascript:parent.GoToSld('slide0080.htm');">用語説明</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face="ＭＳ 明朝" size=2>ドミネートする、ドミネータ</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face="ＭＳ 明朝" size=2>フローグラフの、先頭ノードからノードBへ至る全てのフローがノードAを通るとき、ノードAはノードBをドミネートするという。このとき、ノードAをノードBのドミネータという。</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face="ＭＳ 明朝" size=2>ドミネータツリー</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face="ＭＳ 明朝" size=2>ノード同士のドミネート関係をツリーで表現。</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face="ＭＳ 明朝" size=2>バックエッジ</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face="ＭＳ 明朝" size=2>ノードAがノードBをドミネートするときのB →A。</font></td>
 </tr>
</table>

</p>

<p><font face="ＭＳ 明朝" size=2><b><a
href="javascript:parent.GoToSld('slide0081.htm');">用語説明（その２）</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face="ＭＳ 明朝" size=2>ヘッダ</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face="ＭＳ 明朝" size=2>制御構造の先頭に位置するノード</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face="ＭＳ 明朝" size=2>後続ノード</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face="ＭＳ 明朝" size=2>制御構造全体に対する、次のノード</font></td>
 </tr>
</table>

</p>

<p><font face="ＭＳ 明朝" size=2><b><a
href="javascript:parent.GoToSld('slide0098.htm');">例</a></b></font></p>

<p><font face="ＭＳ 明朝" size=2><b><a
href="javascript:parent.GoToSld('slide0044.htm');">デコンパイラの概要</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face="ＭＳ 明朝" size=2>コントロールフローグラフとドミネータツリーの構築</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face="ＭＳ 明朝" size=2>単純な式の復元</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face="ＭＳ 明朝" size=2>複雑な式の復元</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face="ＭＳ 明朝" size=2>制御構造の復元</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face="ＭＳ 明朝" size=2>結果の出力</font></td>
 </tr>
</table>

</p>

<p><font face="ＭＳ 明朝" size=2><b><a
href="javascript:parent.GoToSld('slide0019.htm');">制御構造の復元</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face="ＭＳ 明朝" size=2>構造化されていないコントロールフローグラフをJavaの制御構造を用いて表す。</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face="ＭＳ 明朝" size=2>Javaの制御構造(if, for, while, do-while)は、全て条件分岐とジャンプで実現されている。</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face="ＭＳ 明朝" size=2>コントロールフローグラフを直接取り扱うのは難しい。</font></td>
 </tr>
</table>

</p>

<p><font face="ＭＳ 明朝" size=2><b><a
href="javascript:parent.GoToSld('slide0016.htm');">どこが難しいか？</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face="ＭＳ 明朝" size=2>一つのノードだけを見て、制御構造が分かるわけではない。</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face="ＭＳ 明朝" size=2>ループを含むフローグラフの辿り方は無限にある。</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face="ＭＳ 明朝" size=2>調べている部分が、本当に、制御構造全体を表しているか？</font></td>
 </tr>
</table>

</p>

<p><font face="ＭＳ 明朝" size=2><b><a
href="javascript:parent.GoToSld('slide0006.htm');">着目</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face="ＭＳ 明朝" size=2>性質：</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face="ＭＳ 明朝" size=2>Javaの制御構造は、それぞれ、ドミネータツリー上でひとつのサブツリーをなす</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face="ＭＳ 明朝" size=2>Javaはブロックが完全な入れ子になる言語</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face="ＭＳ 明朝" size=2>ドミネータツリーを辿り、制御構造を復元</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face="ＭＳ 明朝" size=2>制御構造ごとの復元が可能なので、効率的</font></td>
 </tr>
</table>

</p>

<p><font face="ＭＳ 明朝" size=2><b><a
href="javascript:parent.GoToSld('slide0064.htm');">スライド16</a></b></font></p>

<p><font face="ＭＳ 明朝" size=2><b><a
href="javascript:parent.GoToSld('slide0053.htm');">バイトコードから<br>
直接得られる制御情報</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=3><font face="ＭＳ 明朝" size=2>ループ構造とswitch構造の概要</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face="ＭＳ 明朝" size=2>ヘッダ</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=1><font face="ＭＳ 明朝" size=2>バックエッジあるいは専用の命令からわかる</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face="ＭＳ 明朝" size=2>構造の中身にあたるサブツリーの先頭</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=3><font face="ＭＳ 明朝" size=2>if構造以外のヘッダ（だけ）</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face="ＭＳ 明朝" size=2>ループ構造のヘッダ</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face="ＭＳ 明朝" size=2>(for, while, do-while)</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face="ＭＳ 明朝" size=2>switch構造のヘッダ</font></td>
 </tr>
</table>

</p>

<p><font face="ＭＳ 明朝" size=2><b><a
href="javascript:parent.GoToSld('slide0088.htm');">スライド18</a></b></font></p>

<p><font face="ＭＳ 明朝" size=2><b><a
href="javascript:parent.GoToSld('slide0065.htm');">アルゴリズム</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=3><font face="ＭＳ 明朝" size=2>第一段階</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face="ＭＳ 明朝" size=2>if構造以外のヘッダを識別する。</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=3><font face="ＭＳ 明朝" size=2>第二段階</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face="ＭＳ 明朝" size=2>各ヘッダの本体と後続ノードを識別し、制御構造を選択する。</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=1><font face="ＭＳ 明朝" size=2>後続ノードは、制御構造外のノードであるから、制御構造内から外へのエッジの行き先の中から選ぶ。</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=1><font face="ＭＳ 明朝" size=2>後続ノードは、break文の正当な行き先となる。</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=1><font face="ＭＳ 明朝" size=2>制御構造を決めるとcontinue文の正当な行き先が決まる。</font></td>
 </tr>
</table>

</p>

<p><font face="ＭＳ 明朝" size=2><b><a
href="javascript:parent.GoToSld('slide0068.htm');">アルゴリズム（その２）</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=3><font face="ＭＳ 明朝" size=2>第三段階</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face="ＭＳ 明朝" size=2>if構造を復元する。</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=1><font face="ＭＳ 明朝" size=2>if構造以外の構造は全て復元済み。</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=1><font face="ＭＳ 明朝" size=2>残った条件分岐は、全てif構造。</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=3><font face="ＭＳ 明朝" size=2>第四段階</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face="ＭＳ 明朝" size=2>break/continue文を復元する。</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=1><font face="ＭＳ 明朝" size=2>行き先となり得るノードは既知である。</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=3><font face="ＭＳ 明朝" size=2>最終段階</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face="ＭＳ 明朝" size=2>解析結果を、Java言語の抽象構文木で表す。</font></td>
 </tr>
</table>

</p>

<p><font face="ＭＳ 明朝" size=2><b><a
href="javascript:parent.GoToSld('slide0089.htm');">スライド21</a></b></font></p>

<p><font face="ＭＳ 明朝" size=2><b><a
href="javascript:parent.GoToSld('slide0052.htm');">例で用いるプログラム</a></b></font></p>

<p><font face="ＭＳ 明朝" size=2><b><a
href="javascript:parent.GoToSld('slide0047.htm');">前段階（解析前）</a></b></font></p>

<p><font face="ＭＳ 明朝" size=2><b><a
href="javascript:parent.GoToSld('slide0070.htm');">ドミネータツリー</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face="ＭＳ 明朝" size=2>前のスライドのコントロールフローグラフに対応</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face="ＭＳ 明朝" size=2>ノードの番号は、コントロールフローグラフのノードの番号と一致</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face="ＭＳ 明朝" size=2>好きなときに、フローグラフの情報も参照できる</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face="ＭＳ 明朝" size=2>以降では区別しない</font></td>
 </tr>
</table>

</p>

<p><font face="ＭＳ 明朝" size=2><b><a
href="javascript:parent.GoToSld('slide0086.htm');">第一段階：　ヘッダを識別する</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face="ＭＳ 明朝" size=2>ツリーを探索する。</font></td>
 </tr>
</table>

</p>

<p><font face="ＭＳ 明朝" size=2><b><a
href="javascript:parent.GoToSld('slide0087.htm');">第二段階：<br>
後続ノードを探し制御構造を選ぶ</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face="ＭＳ 明朝" size=2>ノード２のループ構造</font></td>
 </tr>
</table>

</p>

<p><font face="ＭＳ 明朝" size=2><b><a
href="javascript:parent.GoToSld('slide0090.htm');">第三段階：　if構造を復元する</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face="ＭＳ 明朝" size=2>残りの条件分岐は全てif構造</font></td>
 </tr>
</table>

</p>

<p><font face="ＭＳ 明朝" size=2><b><a
href="javascript:parent.GoToSld('slide0091.htm');">第四段階：<br>
break/continueを復元する</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face="ＭＳ 明朝" size=2>breakまたはcontinueで表せるエッジを変換</font></td>
 </tr>
</table>

</p>

<p><font face="ＭＳ 明朝" size=2><b><a
href="javascript:parent.GoToSld('slide0092.htm');">最終段階：　結果を出力する</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face="ＭＳ 明朝" size=2>結果を抽象構文木に変換する。</font></td>
 </tr>
</table>

</p>

<p><font face="ＭＳ 明朝" size=2><b><a
href="javascript:parent.GoToSld('slide0074.htm');">解析結果</a></b></font></p>

<p><font face="ＭＳ 明朝" size=2><b><a
href="javascript:parent.GoToSld('slide0094.htm');">スライド31</a></b></font></p>

<p><font face="ＭＳ 明朝" size=2><b><a
href="javascript:parent.GoToSld('slide0021.htm');">評価</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face="ＭＳ 明朝" size=2>本研究のアルゴリズムの実装として、OpenJITのデコンパイラ部分を使用</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face="ＭＳ 明朝" size=2>テスト用ドライバを使用した。</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face="ＭＳ 明朝" size=2>比較対象として、mocha-b1を使用</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face="ＭＳ 明朝" size=2>評価環境</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face="ＭＳ 明朝" size=2>Sun Ultra60 (UltraSparc2<span
  style="mso-spacerun: yes">&nbsp; </span>300MHz x 2, 256MB)</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face="ＭＳ 明朝" size=2>JDK-1.1.7Bと付属のJava仮想マシン</font></td>
 </tr>
</table>

</p>

<p><font face="ＭＳ 明朝" size=2><b><a
href="javascript:parent.GoToSld('slide0075.htm');">デコンパイル結果（mochaの場合）</a></b></font></p>

<p><font face="ＭＳ 明朝" size=2><b><a
href="javascript:parent.GoToSld('slide0041.htm');">デコンパイル結果（本研究）</a></b></font></p>

<p><font face="ＭＳ 明朝" size=2><b><a
href="javascript:parent.GoToSld('slide0084.htm');">速度比較</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face="ＭＳ 明朝" size=2>我々のものとmochaの両方で適切にデコンパイルできるプログラムを１００回デコンパイルする時間を比較</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face="ＭＳ 明朝" size=2>右のプログラムを使用</font></td>
 </tr>
</table>

</p>

<p><font face="ＭＳ 明朝" size=2><b><a
href="javascript:parent.GoToSld('slide0082.htm');">速度比較の結果</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face="ＭＳ 明朝" size=2>mocha-b1の方がわずかに速い。</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face="ＭＳ 明朝" size=2>有意な差は、システム時間のみ。</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face="ＭＳ 明朝" size=2>デコンパイル対象のクラスファイルを読み込む時間が大きい。</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face="ＭＳ 明朝" size=2>我々のアルゴリズムは、より完全に制御構造を復元し、かつ、遅くはない。</font></td>
 </tr>
</table>

</p>

<p><font face="ＭＳ 明朝" size=2><b><a
href="javascript:parent.GoToSld('slide0085.htm');">処理速度の詳細</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=3><font face="ＭＳ 明朝" size=2>我々のデコンパイラの処理速度の詳細</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face="ＭＳ 明朝" size=2>mochaについては、調査不能</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face="ＭＳ 明朝" size=2>‘java -prof’コマンドで、プロファイルを取得</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face="ＭＳ 明朝" size=2>さまざまなバイトコードで確かめるために、我々のデコンパイラを構成する221個のクラス、1460個のメソッド全てをデコンパイルする時間を調査</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face="ＭＳ 明朝" size=2>結果の考察の便利のために、デコンパイル結果の出力部分を省いたものを使用</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=1><font face="ＭＳ 明朝" size=2>出力にかかる時間が大、かつ、分散されている</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2></td>
 </tr>
</table>

</p>

<p><font face="ＭＳ 明朝" size=2><b><a
href="javascript:parent.GoToSld('slide0097.htm');">プロファイルの結果</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face="ＭＳ 明朝" size=2>制御構造の復元に要する時間は全体のわずか５％</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face="ＭＳ 明朝" size=2>クラスファイルの読み込みが遅い</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face="ＭＳ 明朝" size=2>シンボリック実行も遅い</font></td>
 </tr>
</table>

</p>

<p><font face="ＭＳ 明朝" size=2><b><a
href="javascript:parent.GoToSld('slide0007.htm');">考察</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face="ＭＳ 明朝" size=2>mochaでは復元できない制御構造を、我々のアルゴリズムは復元できた。</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face="ＭＳ 明朝" size=2>処理速度は、mochaと同等。</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face="ＭＳ 明朝" size=2>デコンパイルにかかる処理時間の多くは、制御構造の復元以前の部分に費やされている。</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face="ＭＳ 明朝" size=2>特に、シンボリック実行（式の復元）に時間がかかっている。</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face="ＭＳ 明朝" size=2>最近のVM（HotSpotなど）を用いるだけで、改善可能。</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face="ＭＳ 明朝" size=2>無駄なオブジェクトの生成破棄を止める。</font></td>
 </tr>
</table>

</p>

<p><font face="ＭＳ 明朝" size=2><b><a
href="javascript:parent.GoToSld('slide0009.htm');">結論</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face="ＭＳ 明朝" size=2>本研究の提案したアルゴリズムの有効性が確かめられた。</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face="ＭＳ 明朝" size=2>他の構造化言語への適用も期待できる。</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face="ＭＳ 明朝" size=2>提案したアルゴリズムは、従来のものに比べて、同程度の速度で、より良く制御構造を復元できる。</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face="ＭＳ 明朝" size=2>制御構造の復元にかかる時間は、デコンパイラ全体の処理時間に対して十分短い。</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2></td>
 </tr>
</table>

</p>

<p><font face="ＭＳ 明朝" size=2><b><a
href="javascript:parent.GoToSld('slide0010.htm');">今後の課題</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face="ＭＳ 明朝" size=2>より完全な実装を行う。特に、高速化を行う。</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face="ＭＳ 明朝" size=2>最近のVMを用いた更なる評価を行う。</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face="ＭＳ 明朝" size=2>ボトルネックとなっている、シンボリック実行部分は最近のVMで高速化されるか？</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face="ＭＳ 明朝" size=2>mocha以外のデコンパイラとの比較。</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face="ＭＳ 明朝" size=2>高度な最適化を行うコンパイラのコードは？</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face="ＭＳ 明朝" size=2>ソースを出力するデコンパイラにする。</font></td>
 </tr>
</table>

</p>

</body>

</html>
