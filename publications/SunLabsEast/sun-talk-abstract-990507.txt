  OpenJIT --- A Reflective JIT Compiler in Java
	Satoshi Matuoka (Tokyo Institute of Technology)
	Hirotaka Ogawa (Tokyo Institute of Technology)
	Kouya Shimura (Fujitsu Laboratory)

OpenJIT is a reflective "Open" Just-In-Time compiler, allowing various language extension and compiler optimizations to be added as compiler metaclasses written in Java. OpenJIT allows customization of the JIT compiler for dynamic adaptation to the computing environment, not only of the compiled code but of itself; in this sense, OpenJIT is the first self-compiling JIT compiler we know to date that works with standard Sun JDK JVMs. In fact, almost all of OpenJIT is written in Java, save for a small amount of native code for runtime support and adding APIs to the JVM.
OpenJIT consists of the frontend and the backend. The frontend recovers the abstract syntax tree as well as various control-flow and dataflow information, allowing incorporation of various program analysis and program transformation. In particular, we are currently working on run-time program specialization at JIT compile time using the frontend infrastructure, with some preliminary results.
The backend of OpenJIT uses the JIT interface API to convert the Java bytecodes into SPARC V8 native code, and controls the execution between the JDK and the native code. The backend itself currently does not perform extensive optimization to control the compilation time, performing only "economical" optimizations such as good register allocation and effective peephole optimizations. Additionally, the runtime must be efficient, which we show to have achieved with benchmark results comparing against some production JIT compilers.
OpenJIT has been an ongoing project with collaborative efforts by Tokyo Institute of Technology and Fujitsu, and we are almost ready for a public release. There are additional research and development plans such as x86 code generation, better optimization APIs, and applications to high-performance portable code.
